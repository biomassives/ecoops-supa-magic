import {
  vShow
} from "./chunk-PAXHJRYC.js";
import {
  Fragment,
  computed,
  createBaseVNode,
  createElementBlock,
  defineComponent,
  inject,
  normalizeClass,
  onBeforeMount,
  onBeforeUnmount,
  onMounted,
  openBlock,
  provide,
  reactive,
  ref,
  renderList,
  renderSlot,
  toRefs,
  unref,
  watch,
  withDirectives
} from "./chunk-5LAN43Z3.js";
import "./chunk-DFKQJ226.js";

// node_modules/vue3-tabs-component/dist/vue3-tabs-component.mjs
var y = Symbol("addTab");
var C = Symbol("updateTab");
var w = Symbol("deleteTab");
var D = Symbol("tabsProvider");
function f(s, c) {
  const a = inject(s, c);
  if (typeof a > "u")
    throw new Error(`Could not resolve ${s.description}`);
  return a;
}
var F = ["data-tab-id", "aria-hidden"];
var P = defineComponent({
  __name: "Tab",
  props: {
    panelClass: {
      type: String,
      default: "tabs-component-panel"
    },
    id: {
      type: String,
      default: null
    },
    name: {
      type: String,
      required: true
    },
    prefix: {
      type: String,
      default: ""
    },
    suffix: {
      type: String,
      default: ""
    },
    isDisabled: {
      type: Boolean,
      default: false
    }
  },
  setup(s, { expose: c }) {
    const a = s, i = ref(false), t = f(D), o = f(y), u = f(C), l = f(w), n = a.prefix + a.name + a.suffix, e = a.id ? a.id : a.name.toLowerCase().replace(/ /g, "-"), r = e + "-pane", d = computed(() => "#" + (a.isDisabled ? "" : e));
    return watch(
      () => t.activeTabHash,
      () => {
        i.value = d.value === t.activeTabHash;
      }
    ), watch(
      () => Object.assign({}, a),
      () => {
        u(e, {
          name: a.name,
          header: a.prefix + a.name + a.suffix,
          isDisabled: a.isDisabled,
          hash: d.value,
          index: t.tabs.length,
          computedId: e,
          paneId: r
        });
      }
    ), onBeforeMount(() => {
      o({
        name: a.name,
        header: n,
        isDisabled: a.isDisabled,
        hash: d.value,
        index: t.tabs.length,
        computedId: e,
        paneId: r
      });
    }), onBeforeUnmount(() => {
      l(e);
    }), c({
      header: n,
      computedId: e,
      paneId: r,
      hash: d,
      isActive: i
    }), (x, z) => withDirectives((openBlock(), createElementBlock("section", {
      ref: "tab",
      id: r,
      "data-tab-id": unref(e),
      "aria-hidden": !i.value,
      class: normalizeClass(s.panelClass),
      role: "tabpanel"
    }, [
      renderSlot(x.$slots, "default")
    ], 10, F)), [
      [vShow, i.value]
    ]);
  }
});
var q = class {
  get(c) {
    const a = localStorage.getItem(c);
    if (a === null)
      return null;
    const i = JSON.parse(a);
    return i ? new Date(i.expires) < /* @__PURE__ */ new Date() ? (localStorage.removeItem(c), null) : i.value : null;
  }
  set(c, a, i) {
    const t = (/* @__PURE__ */ new Date()).getTime(), o = new Date(t + i * 6e4);
    localStorage.setItem(c, JSON.stringify({ value: a, expires: o }));
  }
};
var T = new q();
var J = ["aria-controls", "aria-selected", "href", "onClick", "innerHTML"];
var W = defineComponent({
  __name: "Tabs",
  props: {
    cacheLifetime: {
      type: Number,
      default: 5
    },
    options: {
      type: Object,
      required: false,
      default: () => ({
        useUrlFragment: true,
        defaultTabHash: null
      })
    },
    wrapperClass: {
      type: String,
      default: "tabs-component"
    },
    panelsWrapperClass: {
      type: String,
      default: "tabs-component-panels"
    },
    navClass: {
      type: String,
      default: "tabs-component-tabs"
    },
    navItemClass: {
      type: String,
      default: "tabs-component-tab"
    },
    navItemDisabledClass: {
      type: String,
      default: "is-disabled"
    },
    navItemActiveClass: {
      type: String,
      default: "is-active"
    },
    navItemInactiveClass: {
      type: String,
      default: "is-inactive"
    },
    navItemLinkClass: {
      type: String,
      default: "tabs-component-tab-a"
    },
    navItemLinkActiveClass: {
      type: String,
      default: "is-active"
    },
    navItemLinkInactiveClass: {
      type: String,
      default: "is-inactive"
    },
    navItemLinkDisabledClass: {
      type: String,
      default: "is-disabled"
    }
  },
  emits: ["changed", "clicked"],
  setup(s, { expose: c, emit: a }) {
    const i = s, t = reactive({
      activeTabHash: "",
      lastActiveTabHash: "",
      tabs: []
    });
    provide(D, t), provide(y, (l) => {
      t.tabs.push(l);
    }), provide(C, (l, n) => {
      const e = t.tabs.findIndex((r) => r.computedId === l);
      n.isActive = t.tabs[e].isActive, t.tabs[e] = n;
    }), provide(w, (l) => {
      const n = t.tabs.findIndex((e) => e.computedId === l);
      t.tabs.splice(n, 1);
    });
    const o = (l, n) => {
      n && !i.options.useUrlFragment && n.preventDefault();
      const e = u(l);
      if (!e)
        return;
      if (n && e.isDisabled) {
        n.preventDefault();
        return;
      }
      if (t.lastActiveTabHash === e.hash) {
        a("clicked", { tab: e });
        return;
      }
      if (t.tabs.forEach((d) => {
        d.isActive = d.hash === e.hash;
      }), a("changed", { tab: e }), t.lastActiveTabHash = t.activeTabHash = e.hash, i.cacheLifetime <= 0)
        return;
      const r = `vue-tabs-component.cache.${window.location.host}${window.location.pathname}`;
      T.set(r, e.hash, i.cacheLifetime);
    }, u = (l) => t.tabs.find((n) => n.hash === l);
    return onMounted(() => {
      if (!!t.tabs.length) {
        if (window.addEventListener("hashchange", () => o(window.location.hash)), u(window.location.hash)) {
          o(window.location.hash);
          return;
        }
        if (i.cacheLifetime > 0) {
          const l = `vue-tabs-component.cache.${window.location.host}${window.location.pathname}`, n = T.get(l);
          if (n !== null && u(n)) {
            o(n);
            return;
          }
          if (i.options.defaultTabHash && u("#" + i.options.defaultTabHash)) {
            o("#" + i.options.defaultTabHash);
            return;
          }
        }
        o(t.tabs[0].hash);
      }
    }), c({
      ...toRefs(t),
      selectTab: o,
      findTab: u
    }), (l, n) => (openBlock(), createElementBlock("div", {
      class: normalizeClass(s.wrapperClass)
    }, [
      createBaseVNode("ul", {
        role: "tablist",
        class: normalizeClass(s.navClass)
      }, [
        (openBlock(true), createElementBlock(Fragment, null, renderList(t.tabs, (e, r) => (openBlock(), createElementBlock("li", {
          key: r,
          class: normalizeClass([s.navItemClass, e.isDisabled ? s.navItemDisabledClass : "", e.isActive ? s.navItemActiveClass : e.isDisabled ? "" : s.navItemInactiveClass]),
          role: "presentation"
        }, [
          createBaseVNode("a", {
            role: "tab",
            class: normalizeClass([s.navItemLinkClass, e.isDisabled ? s.navItemLinkDisabledClass : "", e.isActive ? s.navItemLinkActiveClass : e.isDisabled ? "" : s.navItemLinkInactiveClass]),
            "aria-controls": e.paneId,
            "aria-selected": e.isActive,
            href: e.hash,
            onClick: (d) => o(e.hash, d),
            innerHTML: e.header
          }, null, 10, J)
        ], 2))), 128))
      ], 2),
      createBaseVNode("div", {
        class: normalizeClass(s.panelsWrapperClass)
      }, [
        renderSlot(l.$slots, "default")
      ], 2)
    ], 2));
  }
});
var V = {
  install(s) {
    s.component("tab", P), s.component("tabs", W);
  }
};
export {
  P as Tab,
  W as Tabs,
  V as default
};
//# sourceMappingURL=vue3-tabs-component.js.map
